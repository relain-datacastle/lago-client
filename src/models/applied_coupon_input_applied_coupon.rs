/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AppliedCouponInputAppliedCoupon {
    /// The customer external unique identifier (provided by your own application)
    #[serde(rename = "external_customer_id")]
    pub external_customer_id: String,
    /// Unique code used to identify the coupon.
    #[serde(rename = "coupon_code")]
    pub coupon_code: String,
    /// The type of frequency for the coupon. It can have three possible values: `once`, `recurring` or `forever`.  - If set to `once`, the coupon is applicable only for a single use. - If set to `recurring`, the coupon can be used multiple times for recurring billing periods. - If set to `forever`, the coupon has unlimited usage and can be applied indefinitely.
    #[serde(rename = "frequency", skip_serializing_if = "Option::is_none")]
    pub frequency: Option<Frequency>,
    /// Specifies the number of billing periods to which the coupon applies. This field is required only for coupons with a `recurring` frequency type
    #[serde(rename = "frequency_duration", skip_serializing_if = "Option::is_none")]
    pub frequency_duration: Option<i32>,
    /// The amount of the coupon in cents. This field is required only for coupon with `fixed_amount` type.
    #[serde(rename = "amount_cents", skip_serializing_if = "Option::is_none")]
    pub amount_cents: Option<i32>,
    /// The currency of the coupon. This field is required only for coupon with `fixed_amount` type.
    #[serde(rename = "amount_currency", skip_serializing_if = "Option::is_none")]
    pub amount_currency: Option<models::Currency>,
    /// The percentage rate of the coupon. This field is required only for coupons with a `percentage` coupon type.
    #[serde(rename = "percentage_rate", skip_serializing_if = "Option::is_none")]
    pub percentage_rate: Option<String>,
}

impl AppliedCouponInputAppliedCoupon {
    pub fn new(external_customer_id: String, coupon_code: String) -> AppliedCouponInputAppliedCoupon {
        AppliedCouponInputAppliedCoupon {
            external_customer_id,
            coupon_code,
            frequency: None,
            frequency_duration: None,
            amount_cents: None,
            amount_currency: None,
            percentage_rate: None,
        }
    }
}
/// The type of frequency for the coupon. It can have three possible values: `once`, `recurring` or `forever`.  - If set to `once`, the coupon is applicable only for a single use. - If set to `recurring`, the coupon can be used multiple times for recurring billing periods. - If set to `forever`, the coupon has unlimited usage and can be applied indefinitely.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Frequency {
    #[serde(rename = "once")]
    Once,
    #[serde(rename = "recurring")]
    Recurring,
    #[serde(rename = "forever")]
    Forever,
}

impl Default for Frequency {
    fn default() -> Frequency {
        Self::Once
    }
}

