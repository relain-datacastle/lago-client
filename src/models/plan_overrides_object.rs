/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PlanOverridesObject : Based plan overrides.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlanOverridesObject {
    /// The base cost of the plan, excluding any applicable taxes, that is billed on a recurring basis. This value is defined at 0 if your plan is a pay-as-you-go plan.
    #[serde(rename = "amount_cents", skip_serializing_if = "Option::is_none")]
    pub amount_cents: Option<i32>,
    /// The currency of the plan. It indicates the monetary unit in which the plan's cost, including taxes and usage-based charges, is expressed.
    #[serde(rename = "amount_currency", skip_serializing_if = "Option::is_none")]
    pub amount_currency: Option<models::Currency>,
    /// The description on the plan.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the plan will be used as the default display name.
    #[serde(rename = "invoice_display_name", skip_serializing_if = "Option::is_none")]
    pub invoice_display_name: Option<String>,
    /// The name of the plan.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// List of unique code used to identify the taxes.
    #[serde(rename = "tax_codes", skip_serializing_if = "Option::is_none")]
    pub tax_codes: Option<Vec<String>>,
    /// The duration in days during which the base cost of the plan is offered for free.
    #[serde(rename = "trial_period", skip_serializing_if = "Option::is_none")]
    pub trial_period: Option<f64>,
    #[serde(rename = "minimum_commitment", skip_serializing_if = "Option::is_none")]
    pub minimum_commitment: Option<Box<models::MinimumCommitmentObject>>,
    /// Additional usage-based charges for this plan.
    #[serde(rename = "charges", skip_serializing_if = "Option::is_none")]
    pub charges: Option<Vec<models::PlanOverridesObjectChargesInner>>,
    /// List of usage thresholds applied to the subscription.
    #[serde(rename = "usage_thresholds", skip_serializing_if = "Option::is_none")]
    pub usage_thresholds: Option<Vec<models::UsageThresholdObject>>,
}

impl PlanOverridesObject {
    /// Based plan overrides.
    pub fn new() -> PlanOverridesObject {
        PlanOverridesObject {
            amount_cents: None,
            amount_currency: None,
            description: None,
            invoice_display_name: None,
            name: None,
            tax_codes: None,
            trial_period: None,
            minimum_commitment: None,
            charges: None,
            usage_thresholds: None,
        }
    }
}

