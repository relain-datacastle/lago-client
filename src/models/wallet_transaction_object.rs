/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WalletTransactionObject {
    /// Unique identifier assigned to the wallet transaction within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet transaction's record within the Lago system.
    #[serde(rename = "lago_id")]
    pub lago_id: uuid::Uuid,
    /// Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet's record within the Lago system.
    #[serde(rename = "lago_wallet_id")]
    pub lago_wallet_id: uuid::Uuid,
    /// The status of the wallet transaction. Possible values are `pending` or `settled`.
    #[serde(rename = "status")]
    pub status: Status,
    /// The source field represents the origin or trigger of the wallet transaction. Possible values are `manual`, `interval`. `threshold`
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Source>,
    /// The transaction status of the wallet transaction. Possible values are `purchased` (with pending or settled status), `granted` (without invoice_id), `voided` or `invoiced`.
    #[serde(rename = "transaction_status")]
    pub transaction_status: TransactionStatus,
    /// The type of transaction. Possible values are `inbound` (increasing the balance) or `outbound` (decreasing the balance).
    #[serde(rename = "transaction_type")]
    pub transaction_type: TransactionType,
    /// The amount of credits based on the rate and the currency.
    #[serde(rename = "amount")]
    pub amount: String,
    /// The number of credits used in the wallet transaction.
    #[serde(rename = "credit_amount")]
    pub credit_amount: String,
    /// A boolean setting that, when set to true, delays issuing an invoice for a wallet top-up until a successful payment is made; if false, the invoice is issued immediately upon wallet top-up, regardless of the payment status. Default value of false.
    #[serde(rename = "invoice_requires_successful_payment", skip_serializing_if = "Option::is_none")]
    pub invoice_requires_successful_payment: Option<bool>,
    /// This field allows you to store a list of key-value pairs that hold additional information or custom attributes related to the data.
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Vec<models::WalletCreateInputWalletRecurringTransactionRulesInnerTransactionMetadataInner>>,
    /// The date when wallet transaction is settled, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
    #[serde(rename = "settled_at", skip_serializing_if = "Option::is_none")]
    pub settled_at: Option<String>,
    /// The date of the wallet transaction creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
    #[serde(rename = "created_at")]
    pub created_at: String,
}

impl WalletTransactionObject {
    pub fn new(lago_id: uuid::Uuid, lago_wallet_id: uuid::Uuid, status: Status, transaction_status: TransactionStatus, transaction_type: TransactionType, amount: String, credit_amount: String, created_at: String) -> WalletTransactionObject {
        WalletTransactionObject {
            lago_id,
            lago_wallet_id,
            status,
            source: None,
            transaction_status,
            transaction_type,
            amount,
            credit_amount,
            invoice_requires_successful_payment: None,
            metadata: None,
            settled_at: None,
            created_at,
        }
    }
}
/// The status of the wallet transaction. Possible values are `pending` or `settled`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "settled")]
    Settled,
}

impl Default for Status {
    fn default() -> Status {
        Self::Pending
    }
}
/// The source field represents the origin or trigger of the wallet transaction. Possible values are `manual`, `interval`. `threshold`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Source {
    #[serde(rename = "manual")]
    Manual,
    #[serde(rename = "interval")]
    Interval,
    #[serde(rename = "threshold")]
    Threshold,
}

impl Default for Source {
    fn default() -> Source {
        Self::Manual
    }
}
/// The transaction status of the wallet transaction. Possible values are `purchased` (with pending or settled status), `granted` (without invoice_id), `voided` or `invoiced`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TransactionStatus {
    #[serde(rename = "purchased")]
    Purchased,
    #[serde(rename = "granted")]
    Granted,
    #[serde(rename = "voided")]
    Voided,
    #[serde(rename = "invoiced")]
    Invoiced,
}

impl Default for TransactionStatus {
    fn default() -> TransactionStatus {
        Self::Purchased
    }
}
/// The type of transaction. Possible values are `inbound` (increasing the balance) or `outbound` (decreasing the balance).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TransactionType {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
}

impl Default for TransactionType {
    fn default() -> TransactionType {
        Self::Inbound
    }
}

