/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChargeProperties {
    /// Graduated ranges, sorted from bottom to top tiers, used for a `graduated` charge model.
    #[serde(rename = "graduated_ranges", skip_serializing_if = "Option::is_none")]
    pub graduated_ranges: Option<Vec<models::ChargePropertiesGraduatedRangesInner>>,
    /// Graduated percentage ranges, sorted from bottom to top tiers, used for a `graduated_percentage` charge model.
    #[serde(rename = "graduated_percentage_ranges", skip_serializing_if = "Option::is_none")]
    pub graduated_percentage_ranges: Option<Vec<models::ChargePropertiesGraduatedPercentageRangesInner>>,
    /// - The unit price, excluding tax, for a `standard` charge model. It is expressed as a decimal value. - The amount, excluding tax, for a complete set of units in a `package` charge model. It is expressed as a decimal value.
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
    /// The quantity of units that are provided free of charge for each billing period in a `package` charge model. This field specifies the number of units that customers can use without incurring any additional cost during each billing cycle.
    #[serde(rename = "free_units", skip_serializing_if = "Option::is_none")]
    pub free_units: Option<i32>,
    /// The quantity of units included in each pack or set for a `package` charge model. It indicates the number of units that are bundled together as a single package or set within the pricing structure.
    #[serde(rename = "package_size", skip_serializing_if = "Option::is_none")]
    pub package_size: Option<i32>,
    /// The percentage rate that is applied to the amount of each transaction for a `percentage` charge model. It is expressed as a decimal value.
    #[serde(rename = "rate", skip_serializing_if = "Option::is_none")]
    pub rate: Option<String>,
    /// The fixed fee that is applied to each transaction for a `percentage` charge model. It is expressed as a decimal value.
    #[serde(rename = "fixed_amount", skip_serializing_if = "Option::is_none")]
    pub fixed_amount: Option<String>,
    /// The count of transactions that are not impacted by the `percentage` rate and fixed fee in a percentage charge model. This field indicates the number of transactions that are exempt from the calculation of charges based on the specified percentage rate and fixed fee.
    #[serde(rename = "free_units_per_events", skip_serializing_if = "Option::is_none")]
    pub free_units_per_events: Option<i32>,
    /// The transaction amount that is not impacted by the `percentage` rate and fixed fee in a percentage charge model. This field indicates the portion of the transaction amount that is exempt from the calculation of charges based on the specified percentage rate and fixed fee.
    #[serde(rename = "free_units_per_total_aggregation", skip_serializing_if = "Option::is_none")]
    pub free_units_per_total_aggregation: Option<String>,
    /// Specifies the maximum allowable spending for a single transaction. Working as a transaction cap.
    #[serde(rename = "per_transaction_max_amount", skip_serializing_if = "Option::is_none")]
    pub per_transaction_max_amount: Option<String>,
    /// Specifies the minimum allowable spending for a single transaction. Working as a transaction floor.
    #[serde(rename = "per_transaction_min_amount", skip_serializing_if = "Option::is_none")]
    pub per_transaction_min_amount: Option<String>,
    /// The list of event properties that are used to group the events on the invoice for a `standard` charge model.
    #[serde(rename = "grouped_by", skip_serializing_if = "Option::is_none")]
    pub grouped_by: Option<Vec<String>>,
    /// Volume ranges, sorted from bottom to top tiers, used for a `volume` charge model.
    #[serde(rename = "volume_ranges", skip_serializing_if = "Option::is_none")]
    pub volume_ranges: Option<Vec<models::ChargePropertiesVolumeRangesInner>>,
}

impl ChargeProperties {
    pub fn new() -> ChargeProperties {
        ChargeProperties {
            graduated_ranges: None,
            graduated_percentage_ranges: None,
            amount: None,
            free_units: None,
            package_size: None,
            rate: None,
            fixed_amount: None,
            free_units_per_events: None,
            free_units_per_total_aggregation: None,
            per_transaction_max_amount: None,
            per_transaction_min_amount: None,
            grouped_by: None,
            volume_ranges: None,
        }
    }
}

