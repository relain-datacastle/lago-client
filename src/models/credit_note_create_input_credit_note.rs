/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreditNoteCreateInputCreditNote {
    /// The invoice unique identifier, created by Lago.
    #[serde(rename = "invoice_id")]
    pub invoice_id: uuid::Uuid,
    /// The reason of the credit note creation. Possible values are `duplicated_charge`, `product_unsatisfactory`, `order_change`, `order_cancellation`, `fraudulent_charge` or `other`.
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Reason>,
    /// The description of the credit note.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The total amount to be credited on the customer balance.
    #[serde(rename = "credit_amount_cents", skip_serializing_if = "Option::is_none")]
    pub credit_amount_cents: Option<i32>,
    /// The total amount to be refunded to the customer.
    #[serde(rename = "refund_amount_cents", skip_serializing_if = "Option::is_none")]
    pub refund_amount_cents: Option<i32>,
    /// The list of credit note's items.
    #[serde(rename = "items")]
    pub items: Vec<models::CreditNoteEstimateInputCreditNoteItemsInner>,
}

impl CreditNoteCreateInputCreditNote {
    pub fn new(invoice_id: uuid::Uuid, items: Vec<models::CreditNoteEstimateInputCreditNoteItemsInner>) -> CreditNoteCreateInputCreditNote {
        CreditNoteCreateInputCreditNote {
            invoice_id,
            reason: None,
            description: None,
            credit_amount_cents: None,
            refund_amount_cents: None,
            items,
        }
    }
}
/// The reason of the credit note creation. Possible values are `duplicated_charge`, `product_unsatisfactory`, `order_change`, `order_cancellation`, `fraudulent_charge` or `other`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "duplicated_charge")]
    DuplicatedCharge,
    #[serde(rename = "product_unsatisfactory")]
    ProductUnsatisfactory,
    #[serde(rename = "order_change")]
    OrderChange,
    #[serde(rename = "order_cancellation")]
    OrderCancellation,
    #[serde(rename = "fraudulent_charge")]
    FraudulentCharge,
    #[serde(rename = "other")]
    Other,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::DuplicatedCharge
    }
}

