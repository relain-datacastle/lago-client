/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvoiceCollectionObject {
    /// Identifies the month to analyze revenue.
    #[serde(rename = "month")]
    pub month: String,
    /// The payment status of the invoices.
    #[serde(rename = "payment_status", skip_serializing_if = "Option::is_none")]
    pub payment_status: Option<PaymentStatus>,
    /// Contains invoices count.
    #[serde(rename = "invoices_count")]
    pub invoices_count: i32,
    /// The total amount of revenue for a period, expressed in cents.
    #[serde(rename = "amount_cents", skip_serializing_if = "Option::is_none")]
    pub amount_cents: Option<i32>,
    /// The currency of revenue analytics. Format must be ISO 4217.
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<models::Currency>,
}

impl InvoiceCollectionObject {
    pub fn new(month: String, invoices_count: i32) -> InvoiceCollectionObject {
        InvoiceCollectionObject {
            month,
            payment_status: None,
            invoices_count,
            amount_cents: None,
            currency: None,
        }
    }
}
/// The payment status of the invoices.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PaymentStatus {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for PaymentStatus {
    fn default() -> PaymentStatus {
        Self::Pending
    }
}

