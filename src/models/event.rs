/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Event {
    /// This field represents a unique identifier for the event. It is crucial for ensuring idempotency, meaning that each event can be uniquely identified and processed without causing any unintended side effects.
    #[serde(rename = "transaction_id")]
    pub transaction_id: String,
    /// The unique identifier of the subscription in your application. This field is mandatory in order to link events to the correct customer subscription.
    #[serde(rename = "external_subscription_id")]
    pub external_subscription_id: String,
    /// The code that identifies a targeted billable metric. It is essential that this code matches the `code` property of one of your active billable metrics. If the provided code does not correspond to any active billable metric, it will be ignored during the process.
    #[serde(rename = "code")]
    pub code: String,
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<Box<models::EventInputEventTimestamp>>,
    /// The precise total amount in cents with precision used by the `dynamic` pricing model to compute the usage amount.
    #[serde(rename = "precise_total_amount_cents", skip_serializing_if = "Option::is_none")]
    pub precise_total_amount_cents: Option<String>,
    /// This field represents additional properties associated with the event, which are utilized in the calculation of the final fee. This object becomes mandatory when the targeted billable metric employs a `sum_agg`, `max_agg`, or `unique_count_agg` aggregation method. However, when using a simple `count_agg`, this object is not required.
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<std::collections::HashMap<String, models::BillableMetricEvaluateExpressionInputEventPropertiesValue>>,
}

impl Event {
    pub fn new(transaction_id: String, external_subscription_id: String, code: String) -> Event {
        Event {
            transaction_id,
            external_subscription_id,
            code,
            timestamp: None,
            precise_total_amount_cents: None,
            properties: None,
        }
    }
}

