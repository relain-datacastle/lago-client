/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PaymentRequestObject {
    /// Unique identifier of the payment request, created by Lago.
    #[serde(rename = "lago_id")]
    pub lago_id: uuid::Uuid,
    /// The customer's email address used for sending dunning notifications
    #[serde(rename = "email")]
    pub email: String,
    /// The sum of the total amounts of all the invoices included in the payment request, expressed in cents.
    #[serde(rename = "amount_cents")]
    pub amount_cents: i32,
    /// The currency of the payment request.
    #[serde(rename = "amount_currency")]
    pub amount_currency: models::Currency,
    /// The status of the payment associated with the payment request. It can have one of the following values: - `pending`: the payment is pending, waiting for payment processing in the payment provider or when the invoice is emitted but users have not updated the payment status through the endpoint. - `succeeded`: the payment of the payment request has been successfully processed. - `failed`: the payment of the payment request has failed or encountered an error during processing.
    #[serde(rename = "payment_status")]
    pub payment_status: PaymentStatus,
    /// The date and time when the payment request was created. It is expressed in UTC format according to the ISO 8601 datetime standard. This field provides the timestamp for the exact moment when the payment request was initially created.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The customer on which the payment request applies. It refers to the customer account or entity associated with the payment request.
    #[serde(rename = "customer")]
    pub customer: Box<models::Model0>,
    #[serde(rename = "invoices")]
    pub invoices: Vec<models::Model0>,
}

impl PaymentRequestObject {
    pub fn new(lago_id: uuid::Uuid, email: String, amount_cents: i32, amount_currency: models::Currency, payment_status: PaymentStatus, created_at: String, customer: models::Model0, invoices: Vec<models::Model0>) -> PaymentRequestObject {
        PaymentRequestObject {
            lago_id,
            email,
            amount_cents,
            amount_currency,
            payment_status,
            created_at,
            customer: Box::new(customer),
            invoices,
        }
    }
}
/// The status of the payment associated with the payment request. It can have one of the following values: - `pending`: the payment is pending, waiting for payment processing in the payment provider or when the invoice is emitted but users have not updated the payment status through the endpoint. - `succeeded`: the payment of the payment request has been successfully processed. - `failed`: the payment of the payment request has failed or encountered an error during processing.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PaymentStatus {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for PaymentStatus {
    fn default() -> PaymentStatus {
        Self::Pending
    }
}

