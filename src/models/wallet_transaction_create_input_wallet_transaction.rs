/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WalletTransactionCreateInputWalletTransaction {
    /// Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet's record within the Lago system.
    #[serde(rename = "wallet_id")]
    pub wallet_id: uuid::Uuid,
    /// The number of paid credits.
    #[serde(rename = "paid_credits", skip_serializing_if = "Option::is_none")]
    pub paid_credits: Option<String>,
    /// The number of free granted credits.
    #[serde(rename = "granted_credits", skip_serializing_if = "Option::is_none")]
    pub granted_credits: Option<String>,
    /// The number of voided credits.
    #[serde(rename = "voided_credits", skip_serializing_if = "Option::is_none")]
    pub voided_credits: Option<String>,
    /// A boolean setting that, when set to true, delays issuing an invoice for a wallet top-up until a successful payment is made; if false, the invoice is issued immediately upon wallet top-up, regardless of the payment status. Default value of false.
    #[serde(rename = "invoice_requires_successful_payment", skip_serializing_if = "Option::is_none")]
    pub invoice_requires_successful_payment: Option<bool>,
    /// This optional field allows you to store a list of key-value pairs that hold additional information or custom attributes related to the data.
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Vec<models::WalletCreateInputWalletRecurringTransactionRulesInnerTransactionMetadataInner>>,
}

impl WalletTransactionCreateInputWalletTransaction {
    pub fn new(wallet_id: uuid::Uuid) -> WalletTransactionCreateInputWalletTransaction {
        WalletTransactionCreateInputWalletTransaction {
            wallet_id,
            paid_credits: None,
            granted_credits: None,
            voided_credits: None,
            invoice_requires_successful_payment: None,
            metadata: None,
        }
    }
}

