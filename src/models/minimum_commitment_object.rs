/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MinimumCommitmentObject {
    /// Unique identifier of the minimum commitment, created by Lago.
    #[serde(rename = "lago_id")]
    pub lago_id: uuid::Uuid,
    /// The unique code representing the plan to be attached to the customer.
    #[serde(rename = "plan_code", skip_serializing_if = "Option::is_none")]
    pub plan_code: Option<String>,
    /// The amount of the minimum commitment in cents.
    #[serde(rename = "amount_cents")]
    pub amount_cents: i32,
    /// Specifies the name that will be displayed on an invoice. If no value is set for this field, the default name will be used as the display name.
    #[serde(rename = "invoice_display_name", skip_serializing_if = "Option::is_none")]
    pub invoice_display_name: Option<String>,
    /// The interval used for recurring billing. It represents the frequency at which subscription billing occurs. The interval can be one of the following values: `yearly`, `quarterly`, `monthly` or `weekly`.
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<Interval>,
    /// The date and time when the minimum commitment was created. It is expressed in UTC format according to the ISO 8601 datetime standard. This field provides the timestamp for the exact moment when the minimum commitment was initially created.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The date and time when the minimum commitment was updated. It is expressed in UTC format according to the ISO 8601 datetime standard. This field provides the timestamp for the exact moment when the minimum commitment was initially created.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// All taxes applied to the minimum commitment.
    #[serde(rename = "taxes", skip_serializing_if = "Option::is_none")]
    pub taxes: Option<Vec<models::TaxObject>>,
}

impl MinimumCommitmentObject {
    pub fn new(lago_id: uuid::Uuid, amount_cents: i32, created_at: String) -> MinimumCommitmentObject {
        MinimumCommitmentObject {
            lago_id,
            plan_code: None,
            amount_cents,
            invoice_display_name: None,
            interval: None,
            created_at,
            updated_at: None,
            taxes: None,
        }
    }
}
/// The interval used for recurring billing. It represents the frequency at which subscription billing occurs. The interval can be one of the following values: `yearly`, `quarterly`, `monthly` or `weekly`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Interval {
    #[serde(rename = "weekly")]
    Weekly,
    #[serde(rename = "monthly")]
    Monthly,
    #[serde(rename = "quarterly")]
    Quarterly,
    #[serde(rename = "yearly")]
    Yearly,
}

impl Default for Interval {
    fn default() -> Interval {
        Self::Weekly
    }
}

