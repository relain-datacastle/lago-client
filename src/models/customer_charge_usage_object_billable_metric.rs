/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CustomerChargeUsageObjectBillableMetric : The related billable metric object.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomerChargeUsageObjectBillableMetric {
    /// Unique identifier assigned to the billable metric within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the billable metric's record within the Lago system.
    #[serde(rename = "lago_id")]
    pub lago_id: uuid::Uuid,
    /// The name of the billable metric used for this charge.
    #[serde(rename = "name")]
    pub name: String,
    /// The code of the billable metric used for this charge.
    #[serde(rename = "code")]
    pub code: String,
    /// The aggregation type of the billable metric used for this charge. Possible values are `count_agg`, `sum_agg`, `max_agg` or `unique_count_agg`.
    #[serde(rename = "aggregation_type")]
    pub aggregation_type: AggregationType,
}

impl CustomerChargeUsageObjectBillableMetric {
    /// The related billable metric object.
    pub fn new(lago_id: uuid::Uuid, name: String, code: String, aggregation_type: AggregationType) -> CustomerChargeUsageObjectBillableMetric {
        CustomerChargeUsageObjectBillableMetric {
            lago_id,
            name,
            code,
            aggregation_type,
        }
    }
}
/// The aggregation type of the billable metric used for this charge. Possible values are `count_agg`, `sum_agg`, `max_agg` or `unique_count_agg`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AggregationType {
    #[serde(rename = "count_agg")]
    CountAgg,
    #[serde(rename = "sum_agg")]
    SumAgg,
    #[serde(rename = "max_agg")]
    MaxAgg,
    #[serde(rename = "unique_count_agg")]
    UniqueCountAgg,
    #[serde(rename = "weighted_sum_agg")]
    WeightedSumAgg,
    #[serde(rename = "latest_agg")]
    LatestAgg,
}

impl Default for AggregationType {
    fn default() -> AggregationType {
        Self::CountAgg
    }
}

