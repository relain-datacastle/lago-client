/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreditNoteObject {
    /// The credit note unique identifier, created by Lago.
    #[serde(rename = "lago_id")]
    pub lago_id: uuid::Uuid,
    /// The sequential identifier of the credit note, specifically scoped on the associated invoice. It provides a unique numerical identifier for the credit note within the context of the invoice.
    #[serde(rename = "sequential_id")]
    pub sequential_id: i32,
    /// The credit note unique number.
    #[serde(rename = "number")]
    pub number: String,
    /// Unique identifier assigned to the invoice that the credit note belongs to
    #[serde(rename = "lago_invoice_id")]
    pub lago_invoice_id: uuid::Uuid,
    /// The invoice unique number, related to the credit note.
    #[serde(rename = "invoice_number")]
    pub invoice_number: String,
    /// The date of creation of the credit note. It follows the ISO 8601 date format and provides the specific date when the credit note was created.
    #[serde(rename = "issuing_date")]
    pub issuing_date: String,
    /// The status of the credit portion of the credit note. It indicates the current state or condition of the credit amount associated with the credit note. The possible values for this field are:  - `available`: this status indicates that an amount remains available for future usage. The credit can be applied towards future transactions or invoices. - `consumed`: this status indicates that the credit amount has been fully consumed. The remaining amount is 0, indicating that the credit has been utilized in its entirety. - `voided`: this status indicates that the remaining amount of the credit cannot be used any further. The credit has been voided and is no longer available for application or redemption.
    #[serde(rename = "credit_status", skip_serializing_if = "Option::is_none")]
    pub credit_status: Option<CreditStatus>,
    /// The status of the refund portion of the credit note. It indicates the current state or condition of the refund associated with the credit note. The possible values for this field are:  - `pending`: this status indicates that the refund is pending execution. The refund request has been initiated but has not been processed or completed yet. - `succeeded`: this status indicates that the refund has been successfully executed. The refund amount has been processed and returned to the customer or the designated recipient. - `failed`: this status indicates that the refund failed to execute. The refund request encountered an error or unsuccessful processing, and the refund amount could not be returned.
    #[serde(rename = "refund_status", skip_serializing_if = "Option::is_none")]
    pub refund_status: Option<RefundStatus>,
    /// The reason of the credit note creation. Possible values are `duplicated_charge`, `product_unsatisfactory`, `order_change`, `order_cancellation`, `fraudulent_charge` or `other`.
    #[serde(rename = "reason")]
    pub reason: Reason,
    /// The description of the credit note.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The currency of the credit note.
    #[serde(rename = "currency")]
    pub currency: models::Currency,
    /// The total amount of the credit note, expressed in cents.
    #[serde(rename = "total_amount_cents")]
    pub total_amount_cents: i32,
    /// The tax amount of the credit note, expressed in cents.
    #[serde(rename = "taxes_amount_cents")]
    pub taxes_amount_cents: i32,
    /// The tax rate associated with this specific credit note.
    #[serde(rename = "taxes_rate")]
    pub taxes_rate: f64,
    /// The subtotal of the credit note excluding any applicable taxes, expressed in cents.
    #[serde(rename = "sub_total_excluding_taxes_amount_cents")]
    pub sub_total_excluding_taxes_amount_cents: i32,
    /// The remaining credit note amount, expressed in cents.
    #[serde(rename = "balance_amount_cents")]
    pub balance_amount_cents: i32,
    /// The credited amount of the credit note, expressed in cents.
    #[serde(rename = "credit_amount_cents")]
    pub credit_amount_cents: i32,
    /// The refunded amount of the credit note, expressed in cents.
    #[serde(rename = "refund_amount_cents")]
    pub refund_amount_cents: i32,
    /// The pro-rated amount of the coupons applied to the source invoice.
    #[serde(rename = "coupons_adjustment_amount_cents")]
    pub coupons_adjustment_amount_cents: i32,
    /// The date when the credit note was created. It is expressed in Coordinated Universal Time (UTC).
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The date when the credit note was last updated. It is expressed in Coordinated Universal Time (UTC).
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// The PDF file of the credit note.
    #[serde(rename = "file_url", skip_serializing_if = "Option::is_none")]
    pub file_url: Option<String>,
    /// Array of credit note's items.
    #[serde(rename = "items", skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<models::CreditNoteItemObject>>,
    #[serde(rename = "applied_taxes", skip_serializing_if = "Option::is_none")]
    pub applied_taxes: Option<Vec<models::CreditNoteAppliedTaxObject>>,
}

impl CreditNoteObject {
    pub fn new(lago_id: uuid::Uuid, sequential_id: i32, number: String, lago_invoice_id: uuid::Uuid, invoice_number: String, issuing_date: String, reason: Reason, currency: models::Currency, total_amount_cents: i32, taxes_amount_cents: i32, taxes_rate: f64, sub_total_excluding_taxes_amount_cents: i32, balance_amount_cents: i32, credit_amount_cents: i32, refund_amount_cents: i32, coupons_adjustment_amount_cents: i32, created_at: String, updated_at: String) -> CreditNoteObject {
        CreditNoteObject {
            lago_id,
            sequential_id,
            number,
            lago_invoice_id,
            invoice_number,
            issuing_date,
            credit_status: None,
            refund_status: None,
            reason,
            description: None,
            currency,
            total_amount_cents,
            taxes_amount_cents,
            taxes_rate,
            sub_total_excluding_taxes_amount_cents,
            balance_amount_cents,
            credit_amount_cents,
            refund_amount_cents,
            coupons_adjustment_amount_cents,
            created_at,
            updated_at,
            file_url: None,
            items: None,
            applied_taxes: None,
        }
    }
}
/// The status of the credit portion of the credit note. It indicates the current state or condition of the credit amount associated with the credit note. The possible values for this field are:  - `available`: this status indicates that an amount remains available for future usage. The credit can be applied towards future transactions or invoices. - `consumed`: this status indicates that the credit amount has been fully consumed. The remaining amount is 0, indicating that the credit has been utilized in its entirety. - `voided`: this status indicates that the remaining amount of the credit cannot be used any further. The credit has been voided and is no longer available for application or redemption.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CreditStatus {
    #[serde(rename = "available")]
    Available,
    #[serde(rename = "consumed")]
    Consumed,
    #[serde(rename = "voided")]
    Voided,
}

impl Default for CreditStatus {
    fn default() -> CreditStatus {
        Self::Available
    }
}
/// The status of the refund portion of the credit note. It indicates the current state or condition of the refund associated with the credit note. The possible values for this field are:  - `pending`: this status indicates that the refund is pending execution. The refund request has been initiated but has not been processed or completed yet. - `succeeded`: this status indicates that the refund has been successfully executed. The refund amount has been processed and returned to the customer or the designated recipient. - `failed`: this status indicates that the refund failed to execute. The refund request encountered an error or unsuccessful processing, and the refund amount could not be returned.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RefundStatus {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for RefundStatus {
    fn default() -> RefundStatus {
        Self::Pending
    }
}
/// The reason of the credit note creation. Possible values are `duplicated_charge`, `product_unsatisfactory`, `order_change`, `order_cancellation`, `fraudulent_charge` or `other`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "duplicated_charge")]
    DuplicatedCharge,
    #[serde(rename = "product_unsatisfactory")]
    ProductUnsatisfactory,
    #[serde(rename = "order_change")]
    OrderChange,
    #[serde(rename = "order_cancellation")]
    OrderCancellation,
    #[serde(rename = "fraudulent_charge")]
    FraudulentCharge,
    #[serde(rename = "other")]
    Other,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::DuplicatedCharge
    }
}

