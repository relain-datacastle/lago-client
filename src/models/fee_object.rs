/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FeeObject {
    /// Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee's record within the Lago system.
    #[serde(rename = "lago_id", skip_serializing_if = "Option::is_none")]
    pub lago_id: Option<uuid::Uuid>,
    /// Unique identifier assigned to the charge that the fee belongs to
    #[serde(rename = "lago_charge_id", skip_serializing_if = "Option::is_none")]
    pub lago_charge_id: Option<uuid::Uuid>,
    /// Unique identifier assigned to the charge filter that the fee belongs to
    #[serde(rename = "lago_charge_filter_id", skip_serializing_if = "Option::is_none")]
    pub lago_charge_filter_id: Option<uuid::Uuid>,
    /// Unique identifier assigned to the invoice that the fee belongs to
    #[serde(rename = "lago_invoice_id", skip_serializing_if = "Option::is_none")]
    pub lago_invoice_id: Option<uuid::Uuid>,
    /// Unique identifier assigned to the true-up fee when a minimum has been set to the charge. This identifier helps to distinguish and manage the true-up fee associated with the charge, which may be applicable when a minimum threshold or limit is set for the charge amount.
    #[serde(rename = "lago_true_up_fee_id", skip_serializing_if = "Option::is_none")]
    pub lago_true_up_fee_id: Option<uuid::Uuid>,
    /// Unique identifier assigned to the parent fee on which the true-up fee is assigned. This identifier establishes the relationship between the parent fee and the associated true-up fee.
    #[serde(rename = "lago_true_up_parent_fee_id", skip_serializing_if = "Option::is_none")]
    pub lago_true_up_parent_fee_id: Option<uuid::Uuid>,
    /// Unique identifier assigned to the subscription, created by Lago. This field is specifically displayed when the fee type is charge or subscription.
    #[serde(rename = "lago_subscription_id", skip_serializing_if = "Option::is_none")]
    pub lago_subscription_id: Option<uuid::Uuid>,
    /// Unique identifier assigned to the customer, created by Lago. This field is specifically displayed when the fee type is charge or subscription.
    #[serde(rename = "lago_customer_id", skip_serializing_if = "Option::is_none")]
    pub lago_customer_id: Option<uuid::Uuid>,
    /// Unique identifier assigned to the customer in your application. This field is specifically displayed when the fee type is charge or subscription.
    #[serde(rename = "external_customer_id", skip_serializing_if = "Option::is_none")]
    pub external_customer_id: Option<String>,
    /// Unique identifier assigned to the subscription in your application. This field is specifically displayed when the fee type is charge or subscription.
    #[serde(rename = "external_subscription_id", skip_serializing_if = "Option::is_none")]
    pub external_subscription_id: Option<String>,
    /// Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
    #[serde(rename = "invoice_display_name", skip_serializing_if = "Option::is_none")]
    pub invoice_display_name: Option<String>,
    /// The cost of this specific fee, excluding any applicable taxes.
    #[serde(rename = "amount_cents")]
    pub amount_cents: i32,
    /// The cost of this specific fee, excluding any applicable taxes, with precision.
    #[serde(rename = "precise_amount", skip_serializing_if = "Option::is_none")]
    pub precise_amount: Option<String>,
    /// The cost of this specific fee, including any applicable taxes, with precision.
    #[serde(rename = "precise_total_amount", skip_serializing_if = "Option::is_none")]
    pub precise_total_amount: Option<String>,
    /// The currency of this specific fee. It indicates the monetary unit in which the fee's cost is expressed.
    #[serde(rename = "amount_currency")]
    pub amount_currency: models::Currency,
    /// The cost of the tax associated with this specific fee.
    #[serde(rename = "taxes_amount_cents")]
    pub taxes_amount_cents: i32,
    /// The cost of the tax associated with this specific fee, with precision.
    #[serde(rename = "taxes_precise_amount", skip_serializing_if = "Option::is_none")]
    pub taxes_precise_amount: Option<String>,
    /// The tax rate associated with this specific fee.
    #[serde(rename = "taxes_rate")]
    pub taxes_rate: f64,
    /// The number of units used to charge the customer. This field indicates the quantity or count of units consumed or utilized in the context of the charge. It helps in determining the basis for calculating the fee or cost associated with the usage of the service or product provided to the customer.
    #[serde(rename = "units")]
    pub units: String,
    /// The unit amount of the fee per unit, with precision.
    #[serde(rename = "precise_unit_amount")]
    pub precise_unit_amount: String,
    /// The cost of this specific fee, including any applicable taxes.
    #[serde(rename = "total_amount_cents")]
    pub total_amount_cents: i32,
    /// The currency of this specific fee, including any applicable taxes.
    #[serde(rename = "total_amount_currency")]
    pub total_amount_currency: models::Currency,
    /// The number of events that have been sent and used to charge the customer. This field indicates the count or quantity of events that have been processed and considered in the charging process.
    #[serde(rename = "events_count", skip_serializing_if = "Option::is_none")]
    pub events_count: Option<i32>,
    /// Flag that indicates whether the fee was paid in advance. It serves as a boolean value, where `true` represents that the fee was paid in advance (straightaway), and `false` indicates that the fee was not paid in arrears (at the end of the period).
    #[serde(rename = "pay_in_advance")]
    pub pay_in_advance: bool,
    /// Flag that indicates whether the fee was included on the invoice. It serves as a boolean value, where `true` represents that the fee was included on the invoice, and `false` indicates that the fee was not included on the invoice.
    #[serde(rename = "invoiceable")]
    pub invoiceable: bool,
    /// The beginning date of the period that the fee covers. It is applicable only to `subscription` and `charge` fees. This field indicates the start date of the billing period or subscription period associated with the fee.
    #[serde(rename = "from_date", skip_serializing_if = "Option::is_none")]
    pub from_date: Option<String>,
    /// The ending date of the period that the fee covers. It is applicable only to `subscription` and `charge` fees. This field indicates the end date of the billing period or subscription period associated with the fee.
    #[serde(rename = "to_date", skip_serializing_if = "Option::is_none")]
    pub to_date: Option<String>,
    /// Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are `pending`, `succeeded`, `failed` and `refunded`.
    #[serde(rename = "payment_status")]
    pub payment_status: PaymentStatus,
    /// The date and time when the fee was created. It is provided in Coordinated Universal Time (UTC) format.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The date and time when the payment for the fee was successfully processed. It is provided in Coordinated Universal Time (UTC) format.
    #[serde(rename = "succeeded_at", skip_serializing_if = "Option::is_none")]
    pub succeeded_at: Option<String>,
    /// The date and time when the payment for the fee failed to process. It is provided in Coordinated Universal Time (UTC) format.
    #[serde(rename = "failed_at", skip_serializing_if = "Option::is_none")]
    pub failed_at: Option<String>,
    /// The date and time when the payment for the fee was refunded. It is provided in Coordinated Universal Time (UTC) format
    #[serde(rename = "refunded_at", skip_serializing_if = "Option::is_none")]
    pub refunded_at: Option<String>,
    /// Unique identifier assigned to the transaction. This field is specifically displayed when the fee type is `charge` and the payment for the fee is made in advance (`pay_in_advance` is set to `true`).
    #[serde(rename = "event_transaction_id", skip_serializing_if = "Option::is_none")]
    pub event_transaction_id: Option<String>,
    #[serde(rename = "amount_details", skip_serializing_if = "Option::is_none")]
    pub amount_details: Option<Box<models::FeeObjectAmountDetails>>,
    #[serde(rename = "item")]
    pub item: Box<models::FeeObjectItem>,
    /// List of fee applied taxes
    #[serde(rename = "applied_taxes", skip_serializing_if = "Option::is_none")]
    pub applied_taxes: Option<Vec<models::FeeAppliedTaxObject>>,
}

impl FeeObject {
    pub fn new(amount_cents: i32, amount_currency: models::Currency, taxes_amount_cents: i32, taxes_rate: f64, units: String, precise_unit_amount: String, total_amount_cents: i32, total_amount_currency: models::Currency, pay_in_advance: bool, invoiceable: bool, payment_status: PaymentStatus, item: models::FeeObjectItem) -> FeeObject {
        FeeObject {
            lago_id: None,
            lago_charge_id: None,
            lago_charge_filter_id: None,
            lago_invoice_id: None,
            lago_true_up_fee_id: None,
            lago_true_up_parent_fee_id: None,
            lago_subscription_id: None,
            lago_customer_id: None,
            external_customer_id: None,
            external_subscription_id: None,
            invoice_display_name: None,
            amount_cents,
            precise_amount: None,
            precise_total_amount: None,
            amount_currency,
            taxes_amount_cents,
            taxes_precise_amount: None,
            taxes_rate,
            units,
            precise_unit_amount,
            total_amount_cents,
            total_amount_currency,
            events_count: None,
            pay_in_advance,
            invoiceable,
            from_date: None,
            to_date: None,
            payment_status,
            created_at: None,
            succeeded_at: None,
            failed_at: None,
            refunded_at: None,
            event_transaction_id: None,
            amount_details: None,
            item: Box::new(item),
            applied_taxes: None,
        }
    }
}
/// Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are `pending`, `succeeded`, `failed` and `refunded`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PaymentStatus {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "refunded")]
    Refunded,
}

impl Default for PaymentStatus {
    fn default() -> PaymentStatus {
        Self::Pending
    }
}

