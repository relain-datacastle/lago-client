/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlanCreateInputPlan {
    /// The name of the plan.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the plan will be used as the default display name.
    #[serde(rename = "invoice_display_name", skip_serializing_if = "Option::is_none")]
    pub invoice_display_name: Option<String>,
    /// The code of the plan. It serves as a unique identifier associated with a particular plan. The code is typically used for internal or system-level identification purposes, like assigning a subscription, for instance.
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    /// The interval used for recurring billing. It represents the frequency at which subscription billing occurs. The interval can be one of the following values: `yearly`, `quarterly`, `monthly`, or `weekly`.
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<Interval>,
    /// The description on the plan.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The base cost of the plan, excluding any applicable taxes, that is billed on a recurring basis. This value is defined at 0 if your plan is a pay-as-you-go plan.
    #[serde(rename = "amount_cents", skip_serializing_if = "Option::is_none")]
    pub amount_cents: Option<i32>,
    /// The currency of the plan. It indicates the monetary unit in which the plan's cost, including taxes and usage-based charges, is expressed.
    #[serde(rename = "amount_currency", skip_serializing_if = "Option::is_none")]
    pub amount_currency: Option<models::Currency>,
    /// The duration in days during which the base cost of the plan is offered for free.
    #[serde(rename = "trial_period", skip_serializing_if = "Option::is_none")]
    pub trial_period: Option<f64>,
    /// This field determines the billing timing for the plan. When set to `true`, the base cost of the plan is due at the beginning of each billing period. Conversely, when set to `false`, the base cost of the plan is due at the end of each billing period.
    #[serde(rename = "pay_in_advance", skip_serializing_if = "Option::is_none")]
    pub pay_in_advance: Option<bool>,
    /// This field, when set to `true`, enables to invoice usage-based charges on monthly basis, even if the cadence of the plan is yearly. This allows customers to pay charges overage on a monthly basis. This can be set to true only if the plan's interval is `yearly`.
    #[serde(rename = "bill_charges_monthly", skip_serializing_if = "Option::is_none")]
    pub bill_charges_monthly: Option<bool>,
    /// List of unique code used to identify the taxes.
    #[serde(rename = "tax_codes", skip_serializing_if = "Option::is_none")]
    pub tax_codes: Option<Vec<String>>,
    #[serde(rename = "minimum_commitment", skip_serializing_if = "Option::is_none")]
    pub minimum_commitment: Option<Box<models::MinimumCommitmentInput>>,
    /// Additional usage-based charges for this plan.
    #[serde(rename = "charges", skip_serializing_if = "Option::is_none")]
    pub charges: Option<Vec<models::PlanCreateInputPlanChargesInner>>,
    /// List of usage thresholds to apply to the plan.
    #[serde(rename = "usage_thresholds", skip_serializing_if = "Option::is_none")]
    pub usage_thresholds: Option<Vec<models::UsageThresholdInput>>,
}

impl PlanCreateInputPlan {
    pub fn new() -> PlanCreateInputPlan {
        PlanCreateInputPlan {
            name: None,
            invoice_display_name: None,
            code: None,
            interval: None,
            description: None,
            amount_cents: None,
            amount_currency: None,
            trial_period: None,
            pay_in_advance: None,
            bill_charges_monthly: None,
            tax_codes: None,
            minimum_commitment: None,
            charges: None,
            usage_thresholds: None,
        }
    }
}
/// The interval used for recurring billing. It represents the frequency at which subscription billing occurs. The interval can be one of the following values: `yearly`, `quarterly`, `monthly`, or `weekly`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Interval {
    #[serde(rename = "weekly")]
    Weekly,
    #[serde(rename = "monthly")]
    Monthly,
    #[serde(rename = "quarterly")]
    Quarterly,
    #[serde(rename = "yearly")]
    Yearly,
}

impl Default for Interval {
    fn default() -> Interval {
        Self::Weekly
    }
}

