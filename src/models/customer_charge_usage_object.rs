/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomerChargeUsageObject {
    /// The number of units consumed by the customer for a specific charge item.
    #[serde(rename = "units")]
    pub units: String,
    /// The quantity of usage events that have been recorded for a particular charge during the specified time period. These events may also be referred to as the number of transactions in some contexts.
    #[serde(rename = "events_count")]
    pub events_count: i32,
    /// The amount in cents, tax excluded, consumed by the customer for a specific charge item.
    #[serde(rename = "amount_cents")]
    pub amount_cents: i32,
    /// The currency of a usage item consumed by the customer.
    #[serde(rename = "amount_currency")]
    pub amount_currency: models::Currency,
    #[serde(rename = "charge")]
    pub charge: Box<models::CustomerChargeUsageObjectCharge>,
    #[serde(rename = "billable_metric")]
    pub billable_metric: Box<models::CustomerChargeUsageObjectBillableMetric>,
    /// Array of filter object, representing multiple dimensions for a charge item.
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<models::CustomerChargeFiltersUsageObjectInner>>,
    /// Array of aggregated fees, grouped by the event properties defined in a `standard` charge model.
    #[serde(rename = "grouped_usage", skip_serializing_if = "Option::is_none")]
    pub grouped_usage: Option<Vec<models::CustomerChargeGroupedUsageObjectInner>>,
}

impl CustomerChargeUsageObject {
    pub fn new(units: String, events_count: i32, amount_cents: i32, amount_currency: models::Currency, charge: models::CustomerChargeUsageObjectCharge, billable_metric: models::CustomerChargeUsageObjectBillableMetric) -> CustomerChargeUsageObject {
        CustomerChargeUsageObject {
            units,
            events_count,
            amount_cents,
            amount_currency,
            charge: Box::new(charge),
            billable_metric: Box::new(billable_metric),
            filters: None,
            grouped_usage: None,
        }
    }
}

