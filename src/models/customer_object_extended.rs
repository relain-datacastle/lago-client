/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomerObjectExtended {
    /// Unique identifier assigned to the customer within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the customer's record within the Lago system
    #[serde(rename = "lago_id")]
    pub lago_id: uuid::Uuid,
    /// The unique identifier assigned to the customer within the organization's scope. This identifier is used to track and reference the customer's order of creation within the organization's system. It ensures that each customer has a distinct `sequential_id`` associated with them, allowing for easy identification and sorting based on the order of creation
    #[serde(rename = "sequential_id")]
    pub sequential_id: i32,
    /// A concise and unique identifier for the customer, formed by combining the Organization's `name`, `id`, and customer's `sequential_id`
    #[serde(rename = "slug")]
    pub slug: String,
    /// The customer external unique identifier (provided by your own application)
    #[serde(rename = "external_id")]
    pub external_id: String,
    /// The first line of the billing address
    #[serde(rename = "address_line1", skip_serializing_if = "Option::is_none")]
    pub address_line1: Option<String>,
    /// The second line of the billing address
    #[serde(rename = "address_line2", skip_serializing_if = "Option::is_none")]
    pub address_line2: Option<String>,
    /// The customer's applicable timezone, used for billing purposes in their local time.
    #[serde(rename = "applicable_timezone")]
    pub applicable_timezone: models::Timezone,
    /// The city of the customer's billing address
    #[serde(rename = "city", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    /// Country code of the customer's billing address. Format must be ISO 3166 (alpha-2)
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<models::Country>,
    /// Currency of the customer. Format must be ISO 4217
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<models::Currency>,
    /// The email of the customer
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// The legal company name of the customer
    #[serde(rename = "legal_name", skip_serializing_if = "Option::is_none")]
    pub legal_name: Option<String>,
    /// The legal company number of the customer
    #[serde(rename = "legal_number", skip_serializing_if = "Option::is_none")]
    pub legal_number: Option<String>,
    /// The logo URL of the customer
    #[serde(rename = "logo_url", skip_serializing_if = "Option::is_none")]
    pub logo_url: Option<String>,
    /// The full name of the customer
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// First name of the customer
    #[serde(rename = "firstname", skip_serializing_if = "Option::is_none")]
    pub firstname: Option<String>,
    /// Last name of the customer
    #[serde(rename = "lastname", skip_serializing_if = "Option::is_none")]
    pub lastname: Option<String>,
    /// The type of the customer. It can have one of the following values: - `company`: the customer is a company. - `individual`: the customer is an individual.
    #[serde(rename = "customer_type", skip_serializing_if = "Option::is_none")]
    pub customer_type: Option<CustomerType>,
    /// The phone number of the customer
    #[serde(rename = "phone", skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
    /// The state of the customer's billing address
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The tax identification number of the customer
    #[serde(rename = "tax_identification_number", skip_serializing_if = "Option::is_none")]
    pub tax_identification_number: Option<String>,
    /// The customer's timezone, used for billing purposes in their local time. Overrides the organization's timezone
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<models::Timezone>,
    /// The custom website URL of the customer
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The zipcode of the customer's billing address
    #[serde(rename = "zipcode", skip_serializing_if = "Option::is_none")]
    pub zipcode: Option<String>,
    /// The net payment term, expressed in days, specifies the duration within which a customer is expected to remit payment after the invoice is finalized.
    #[serde(rename = "net_payment_term", skip_serializing_if = "Option::is_none")]
    pub net_payment_term: Option<i32>,
    /// The date of the customer creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC). The creation_date provides a standardized and internationally recognized timestamp for when the customer object was created
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The date of the customer update, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC). The update_date provides a standardized and internationally recognized timestamp for when the customer object was updated
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// Specifies how invoices with a zero total amount should be handled: - `inherit`: (Default) Follows the organization-level configuration. - `finalize`: Invoices are issued and finalized even if the total amount is zero. - `skip`: Invoices with a total amount of zero are not finalized.
    #[serde(rename = "finalize_zero_amount_invoice", skip_serializing_if = "Option::is_none")]
    pub finalize_zero_amount_invoice: Option<FinalizeZeroAmountInvoice>,
    #[serde(rename = "billing_configuration", skip_serializing_if = "Option::is_none")]
    pub billing_configuration: Option<Box<models::CustomerBillingConfiguration>>,
    #[serde(rename = "shipping_address", skip_serializing_if = "Option::is_none")]
    pub shipping_address: Option<Box<models::Address>>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Vec<models::CustomerMetadata>>,
    #[serde(rename = "integration_customers", skip_serializing_if = "Option::is_none")]
    pub integration_customers: Option<Vec<models::IntegrationCustomer>>,
    /// List of customer taxes
    #[serde(rename = "taxes", skip_serializing_if = "Option::is_none")]
    pub taxes: Option<Vec<models::TaxObject>>,
}

impl CustomerObjectExtended {
    pub fn new(lago_id: uuid::Uuid, sequential_id: i32, slug: String, external_id: String, applicable_timezone: models::Timezone, created_at: String) -> CustomerObjectExtended {
        CustomerObjectExtended {
            lago_id,
            sequential_id,
            slug,
            external_id,
            address_line1: None,
            address_line2: None,
            applicable_timezone,
            city: None,
            country: None,
            currency: None,
            email: None,
            legal_name: None,
            legal_number: None,
            logo_url: None,
            name: None,
            firstname: None,
            lastname: None,
            customer_type: None,
            phone: None,
            state: None,
            tax_identification_number: None,
            timezone: None,
            url: None,
            zipcode: None,
            net_payment_term: None,
            created_at,
            updated_at: None,
            finalize_zero_amount_invoice: None,
            billing_configuration: None,
            shipping_address: None,
            metadata: None,
            integration_customers: None,
            taxes: None,
        }
    }
}
/// The type of the customer. It can have one of the following values: - `company`: the customer is a company. - `individual`: the customer is an individual.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CustomerType {
    #[serde(rename = "company")]
    Company,
    #[serde(rename = "individual")]
    Individual,
}

impl Default for CustomerType {
    fn default() -> CustomerType {
        Self::Company
    }
}
/// Specifies how invoices with a zero total amount should be handled: - `inherit`: (Default) Follows the organization-level configuration. - `finalize`: Invoices are issued and finalized even if the total amount is zero. - `skip`: Invoices with a total amount of zero are not finalized.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FinalizeZeroAmountInvoice {
    #[serde(rename = "inherit")]
    Inherit,
    #[serde(rename = "skip")]
    Skip,
    #[serde(rename = "finalize")]
    Finalize,
}

impl Default for FinalizeZeroAmountInvoice {
    fn default() -> FinalizeZeroAmountInvoice {
        Self::Inherit
    }
}

