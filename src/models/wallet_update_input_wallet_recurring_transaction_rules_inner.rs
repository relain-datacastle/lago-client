/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// WalletUpdateInputWalletRecurringTransactionRulesInner : Object that represents rule for wallet recurring transactions.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WalletUpdateInputWalletRecurringTransactionRulesInner {
    /// A unique identifier for the recurring transaction rule in the Lago application. Can be used to update a recurring transaction rule.
    #[serde(rename = "lago_id", skip_serializing_if = "Option::is_none")]
    pub lago_id: Option<uuid::Uuid>,
    /// The trigger. Possible values are `interval` or `threshold`.
    #[serde(rename = "trigger", skip_serializing_if = "Option::is_none")]
    pub trigger: Option<Trigger>,
    /// The method used for recurring top-up. Possible values are `fixed` or `target`.
    #[serde(rename = "method", skip_serializing_if = "Option::is_none")]
    pub method: Option<Method>,
    /// The interval used for recurring top-up. It represents the frequency at which automatic top-up occurs. The interval can be one of the following values: `weekly`, `monthly`, `quarterly` or `yearly`. Required only when trigger is set to `interval`.
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<Interval>,
    /// The threshold for recurring top-ups is the value at which an automatic top-up is triggered. For example, if this threshold is set at 10 credits, an automatic top-up will occur whenever the wallet balance falls to or below 10 credits. Required only when trigger is set to `threshold`.
    #[serde(rename = "threshold_credits", skip_serializing_if = "Option::is_none")]
    pub threshold_credits: Option<String>,
    /// The number of paid credits. Required only if there is no granted credits.
    #[serde(rename = "paid_credits", skip_serializing_if = "Option::is_none")]
    pub paid_credits: Option<String>,
    /// The number of free granted credits. Required only if there is no paid credits.
    #[serde(rename = "granted_credits", skip_serializing_if = "Option::is_none")]
    pub granted_credits: Option<String>,
    /// The effective start date for recurring top-ups. This date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
    #[serde(rename = "started_at", skip_serializing_if = "Option::is_none")]
    pub started_at: Option<String>,
    /// The target ongoing balance is the value set for the ongoing balance to be reached by the automatic top-up. Required only when trigger is set to `target`.
    #[serde(rename = "target_ongoing_balance", skip_serializing_if = "Option::is_none")]
    pub target_ongoing_balance: Option<String>,
    /// A boolean setting that, when set to true, delays issuing an invoice for a wallet top-up until a successful payment is made; if false, the invoice is issued immediately upon wallet top-up, regardless of the payment status. Default value of false.
    #[serde(rename = "invoice_requires_successful_payment", skip_serializing_if = "Option::is_none")]
    pub invoice_requires_successful_payment: Option<bool>,
    /// This optional field allows you to store a list of key-value pairs containing additional information or custom attributes. These key-value pairs will populate the metadata of the wallet transactions triggered by this rule.
    #[serde(rename = "transaction_metadata", skip_serializing_if = "Option::is_none")]
    pub transaction_metadata: Option<Vec<models::WalletCreateInputWalletRecurringTransactionRulesInnerTransactionMetadataInner>>,
}

impl WalletUpdateInputWalletRecurringTransactionRulesInner {
    /// Object that represents rule for wallet recurring transactions.
    pub fn new() -> WalletUpdateInputWalletRecurringTransactionRulesInner {
        WalletUpdateInputWalletRecurringTransactionRulesInner {
            lago_id: None,
            trigger: None,
            method: None,
            interval: None,
            threshold_credits: None,
            paid_credits: None,
            granted_credits: None,
            started_at: None,
            target_ongoing_balance: None,
            invoice_requires_successful_payment: None,
            transaction_metadata: None,
        }
    }
}
/// The trigger. Possible values are `interval` or `threshold`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Trigger {
    #[serde(rename = "interval")]
    Interval,
    #[serde(rename = "threshold")]
    Threshold,
}

impl Default for Trigger {
    fn default() -> Trigger {
        Self::Interval
    }
}
/// The method used for recurring top-up. Possible values are `fixed` or `target`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Method {
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "target")]
    Target,
}

impl Default for Method {
    fn default() -> Method {
        Self::Fixed
    }
}
/// The interval used for recurring top-up. It represents the frequency at which automatic top-up occurs. The interval can be one of the following values: `weekly`, `monthly`, `quarterly` or `yearly`. Required only when trigger is set to `interval`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Interval {
    #[serde(rename = "weekly")]
    Weekly,
    #[serde(rename = "monthly")]
    Monthly,
    #[serde(rename = "quarterly")]
    Quarterly,
    #[serde(rename = "yearly")]
    Yearly,
}

impl Default for Interval {
    fn default() -> Interval {
        Self::Weekly
    }
}

