/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WalletUpdateInputWallet {
    /// The name of the wallet.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The date and time that determines when the wallet will expire. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
    #[serde(rename = "expiration_at", skip_serializing_if = "Option::is_none")]
    pub expiration_at: Option<String>,
    /// A boolean setting that, when set to true, delays issuing an invoice for a wallet top-up until a successful payment is made; if false, the invoice is issued immediately upon wallet top-up, regardless of the payment status. Default value of false.
    #[serde(rename = "invoice_requires_successful_payment", skip_serializing_if = "Option::is_none")]
    pub invoice_requires_successful_payment: Option<bool>,
    /// List of recurring transaction rules. Currently, we only allow one recurring rule per wallet.
    #[serde(rename = "recurring_transaction_rules", skip_serializing_if = "Option::is_none")]
    pub recurring_transaction_rules: Option<Vec<models::WalletUpdateInputWalletRecurringTransactionRulesInner>>,
}

impl WalletUpdateInputWallet {
    pub fn new() -> WalletUpdateInputWallet {
        WalletUpdateInputWallet {
            name: None,
            expiration_at: None,
            invoice_requires_successful_payment: None,
            recurring_transaction_rules: None,
        }
    }
}

