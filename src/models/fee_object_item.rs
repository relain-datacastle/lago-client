/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FeeObjectItem : Item attached to the fee
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FeeObjectItem {
    /// The fee type. Possible values are `add-on`, `charge`, `credit` or `subscription`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The code of the fee item. It can be the code of the `add-o`n, the code of the `charge`, the code of the `credit` or the code of the `subscription`.
    #[serde(rename = "code")]
    pub code: String,
    /// The name of the fee item. It can be the name of the `add-on`, the name of the `charge`, the name of the `credit` or the name of the `subscription`.
    #[serde(rename = "name")]
    pub name: String,
    /// Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
    #[serde(rename = "invoice_display_name", skip_serializing_if = "Option::is_none")]
    pub invoice_display_name: Option<String>,
    /// Specifies the name that will be displayed on an invoice. If no value is set for this field, the actual charge filter values will be used as the default display name.
    #[serde(rename = "filter_invoice_display_name", skip_serializing_if = "Option::is_none")]
    pub filter_invoice_display_name: Option<String>,
    /// Key value list of event properties
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<std::collections::HashMap<String, Vec<String>>>,
    /// Unique identifier of the fee item, created by Lago. It can be the identifier of the `add-on`, the identifier of the `charge`, the identifier of the `credit` or the identifier of the `subscription`.
    #[serde(rename = "lago_item_id")]
    pub lago_item_id: uuid::Uuid,
    /// The type of the fee item. Possible values are `AddOn`, `BillableMetric`, `WalletTransaction` or `Subscription`.
    #[serde(rename = "item_type")]
    pub item_type: ItemType,
    /// Key value list of event properties aggregated by the charge model
    #[serde(rename = "grouped_by", skip_serializing_if = "Option::is_none")]
    pub grouped_by: Option<std::collections::HashMap<String, String>>,
}

impl FeeObjectItem {
    /// Item attached to the fee
    pub fn new(r#type: Type, code: String, name: String, lago_item_id: uuid::Uuid, item_type: ItemType) -> FeeObjectItem {
        FeeObjectItem {
            r#type,
            code,
            name,
            invoice_display_name: None,
            filter_invoice_display_name: None,
            filters: None,
            lago_item_id,
            item_type,
            grouped_by: None,
        }
    }
}
/// The fee type. Possible values are `add-on`, `charge`, `credit` or `subscription`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "charge")]
    Charge,
    #[serde(rename = "add_on")]
    AddOn,
    #[serde(rename = "subscription")]
    Subscription,
    #[serde(rename = "credit")]
    Credit,
}

impl Default for Type {
    fn default() -> Type {
        Self::Charge
    }
}
/// The type of the fee item. Possible values are `AddOn`, `BillableMetric`, `WalletTransaction` or `Subscription`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ItemType {
    #[serde(rename = "AddOn")]
    AddOn,
    #[serde(rename = "BillableMetric")]
    BillableMetric,
    #[serde(rename = "Subscription")]
    Subscription,
    #[serde(rename = "WalletTransaction")]
    WalletTransaction,
}

impl Default for ItemType {
    fn default() -> ItemType {
        Self::AddOn
    }
}

