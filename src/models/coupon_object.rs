/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CouponObject {
    /// Unique identifier of the coupon, created by Lago.
    #[serde(rename = "lago_id")]
    pub lago_id: uuid::Uuid,
    /// The name of the coupon.
    #[serde(rename = "name")]
    pub name: String,
    /// Unique code used to identify the coupon.
    #[serde(rename = "code")]
    pub code: String,
    /// Description of the coupon.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The type of the coupon. It can have two possible values: `fixed_amount` or `percentage`.  - If set to `fixed_amount`, the coupon represents a fixed amount discount. - If set to `percentage`, the coupon represents a percentage-based discount.
    #[serde(rename = "coupon_type")]
    pub coupon_type: CouponType,
    /// The amount of the coupon in cents. This field is required only for coupon with `fixed_amount` type.
    #[serde(rename = "amount_cents", skip_serializing_if = "Option::is_none")]
    pub amount_cents: Option<i32>,
    /// The currency of the coupon. This field is required only for coupon with `fixed_amount` type.
    #[serde(rename = "amount_currency", skip_serializing_if = "Option::is_none")]
    pub amount_currency: Option<models::Currency>,
    /// Indicates whether the coupon can be reused or not. If set to `true`, the coupon is reusable, meaning it can be applied multiple times to the same customer. If set to `false`, the coupon can only be used once and is not reusable. If not specified, this field is set to `true` by default.
    #[serde(rename = "reusable")]
    pub reusable: bool,
    /// The coupon is limited to specific plans. The possible values can be `true` or `false`.
    #[serde(rename = "limited_plans")]
    pub limited_plans: bool,
    /// An array of plan codes to which the coupon is applicable. By specifying the plan codes in this field, you can restrict the coupon's usage to specific plans only.
    #[serde(rename = "plan_codes", skip_serializing_if = "Option::is_none")]
    pub plan_codes: Option<Vec<String>>,
    /// The coupon is limited to specific billable metrics. The possible values can be `true` or `false`.
    #[serde(rename = "limited_billable_metrics")]
    pub limited_billable_metrics: bool,
    /// An array of billable metric codes to which the coupon is applicable. By specifying the billable metric codes in this field, you can restrict the coupon's usage to specific metrics only.
    #[serde(rename = "billable_metric_codes", skip_serializing_if = "Option::is_none")]
    pub billable_metric_codes: Option<Vec<String>>,
    /// The percentage rate of the coupon. This field is required only for coupons with a `percentage` coupon type.
    #[serde(rename = "percentage_rate", skip_serializing_if = "Option::is_none")]
    pub percentage_rate: Option<String>,
    /// The type of frequency for the coupon. It can have three possible values: `once`, `recurring`, or `forever`.  - If set to `once`, the coupon is applicable only for a single use. - If set to `recurring`, the coupon can be used multiple times for recurring billing periods. - If set to `forever`, the coupon has unlimited usage and can be applied indefinitely.
    #[serde(rename = "frequency")]
    pub frequency: Frequency,
    /// Specifies the number of billing periods to which the coupon applies. This field is required only for coupons with a `recurring` frequency type
    #[serde(rename = "frequency_duration", skip_serializing_if = "Option::is_none")]
    pub frequency_duration: Option<i32>,
    /// Specifies the type of expiration for the coupon. It can have two possible values: `time_limit` or `no_expiration`.  - If set to `time_limit`, the coupon has an expiration based on a specified time limit. - If set to `no_expiration`, the coupon does not have an expiration date and remains valid indefinitely.
    #[serde(rename = "expiration")]
    pub expiration: Expiration,
    /// The expiration date and time of the coupon. This field is required only for coupons with `expiration` set to `time_limit`. The expiration date and time should be specified in UTC format according to the ISO 8601 datetime standard. It indicates the exact moment when the coupon will expire and is no longer valid.
    #[serde(rename = "expiration_at", skip_serializing_if = "Option::is_none")]
    pub expiration_at: Option<String>,
    /// The date and time when the coupon was created. It is expressed in UTC format according to the ISO 8601 datetime standard. This field provides the timestamp for the exact moment when the coupon was initially created.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// This field indicates if the coupon has been terminated and is no longer usable. If it's not null, it won't be removed for existing customers using it, but it prevents the coupon from being applied in the future.
    #[serde(rename = "terminated_at", skip_serializing_if = "Option::is_none")]
    pub terminated_at: Option<String>,
}

impl CouponObject {
    pub fn new(lago_id: uuid::Uuid, name: String, code: String, coupon_type: CouponType, reusable: bool, limited_plans: bool, limited_billable_metrics: bool, frequency: Frequency, expiration: Expiration, created_at: String) -> CouponObject {
        CouponObject {
            lago_id,
            name,
            code,
            description: None,
            coupon_type,
            amount_cents: None,
            amount_currency: None,
            reusable,
            limited_plans,
            plan_codes: None,
            limited_billable_metrics,
            billable_metric_codes: None,
            percentage_rate: None,
            frequency,
            frequency_duration: None,
            expiration,
            expiration_at: None,
            created_at,
            terminated_at: None,
        }
    }
}
/// The type of the coupon. It can have two possible values: `fixed_amount` or `percentage`.  - If set to `fixed_amount`, the coupon represents a fixed amount discount. - If set to `percentage`, the coupon represents a percentage-based discount.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CouponType {
    #[serde(rename = "fixed_amount")]
    FixedAmount,
    #[serde(rename = "percentage")]
    Percentage,
}

impl Default for CouponType {
    fn default() -> CouponType {
        Self::FixedAmount
    }
}
/// The type of frequency for the coupon. It can have three possible values: `once`, `recurring`, or `forever`.  - If set to `once`, the coupon is applicable only for a single use. - If set to `recurring`, the coupon can be used multiple times for recurring billing periods. - If set to `forever`, the coupon has unlimited usage and can be applied indefinitely.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Frequency {
    #[serde(rename = "once")]
    Once,
    #[serde(rename = "recurring")]
    Recurring,
    #[serde(rename = "forever")]
    Forever,
}

impl Default for Frequency {
    fn default() -> Frequency {
        Self::Once
    }
}
/// Specifies the type of expiration for the coupon. It can have two possible values: `time_limit` or `no_expiration`.  - If set to `time_limit`, the coupon has an expiration based on a specified time limit. - If set to `no_expiration`, the coupon does not have an expiration date and remains valid indefinitely.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Expiration {
    #[serde(rename = "no_expiration")]
    NoExpiration,
    #[serde(rename = "time_limit")]
    TimeLimit,
}

impl Default for Expiration {
    fn default() -> Expiration {
        Self::NoExpiration
    }
}

