/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WalletObject {
    /// Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet's record within the Lago system.
    #[serde(rename = "lago_id")]
    pub lago_id: uuid::Uuid,
    /// Unique identifier assigned to the customer within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the customer's record within the Lago system.
    #[serde(rename = "lago_customer_id")]
    pub lago_customer_id: uuid::Uuid,
    /// The customer external unique identifier (provided by your own application)
    #[serde(rename = "external_customer_id")]
    pub external_customer_id: String,
    /// The status of the wallet. Possible values are `active` or `terminated`.
    #[serde(rename = "status")]
    pub status: Status,
    /// The currency of the wallet.
    #[serde(rename = "currency")]
    pub currency: models::Currency,
    /// The name of the wallet.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The rate of conversion between credits and the amount in the specified currency. It indicates the ratio or factor used to convert credits into the corresponding monetary value in the currency of the transaction.
    #[serde(rename = "rate_amount")]
    pub rate_amount: String,
    /// The current wallet balance expressed in credits. This reflects the available balance after all transactions are settled.
    #[serde(rename = "credits_balance")]
    pub credits_balance: String,
    /// The current wallet balance expressed in cents. This reflects the available balance after all transactions are settled.
    #[serde(rename = "balance_cents")]
    pub balance_cents: i32,
    /// The number of consumed credits.
    #[serde(rename = "consumed_credits")]
    pub consumed_credits: String,
    /// The date of the wallet creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The date and time that determines when the wallet will expire. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
    #[serde(rename = "expiration_at", skip_serializing_if = "Option::is_none")]
    pub expiration_at: Option<String>,
    /// The date and time of the last balance top-up. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
    #[serde(rename = "last_balance_sync_at", skip_serializing_if = "Option::is_none")]
    pub last_balance_sync_at: Option<String>,
    /// The date and time of the last credits consumption. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
    #[serde(rename = "last_consumed_credit_at", skip_serializing_if = "Option::is_none")]
    pub last_consumed_credit_at: Option<String>,
    /// The date of terminaison of the wallet. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
    #[serde(rename = "terminated_at", skip_serializing_if = "Option::is_none")]
    pub terminated_at: Option<String>,
    /// A boolean setting that, when set to true, delays issuing an invoice for a wallet top-up until a successful payment is made; if false, the invoice is issued immediately upon wallet top-up, regardless of the payment status. Default value of false.
    #[serde(rename = "invoice_requires_successful_payment", skip_serializing_if = "Option::is_none")]
    pub invoice_requires_successful_payment: Option<bool>,
    /// List of recurring transaction rules. Currently, we only allow one recurring rule per wallet.
    #[serde(rename = "recurring_transaction_rules", skip_serializing_if = "Option::is_none")]
    pub recurring_transaction_rules: Option<Vec<models::WalletObjectRecurringTransactionRulesInner>>,
    /// The ongoing wallet balance expressed in cents. This represents the `balance_cents` minus the `ongoing_usage_balance_cents`, showing the real time balance after accounting for current usage including taxes.
    #[serde(rename = "ongoing_balance_cents")]
    pub ongoing_balance_cents: i32,
    /// The ongoing usage balance of the wallet, expressed in cents. This reflects all current usage and draft invoices including taxes.
    #[serde(rename = "ongoing_usage_balance_cents")]
    pub ongoing_usage_balance_cents: i32,
    /// The ongoing wallet balance expressed in credits. This represents the `credits_balance` minus the `credits_ongoing_usage_balance`, showing the real time balance after accounting for current usage including taxes.
    #[serde(rename = "credits_ongoing_balance")]
    pub credits_ongoing_balance: String,
    /// The ongoing usage balance of the wallet, expressed in credits. This reflects all current usage and draft invoices including taxes.
    #[serde(rename = "credits_ongoing_usage_balance")]
    pub credits_ongoing_usage_balance: String,
}

impl WalletObject {
    pub fn new(lago_id: uuid::Uuid, lago_customer_id: uuid::Uuid, external_customer_id: String, status: Status, currency: models::Currency, rate_amount: String, credits_balance: String, balance_cents: i32, consumed_credits: String, created_at: String, ongoing_balance_cents: i32, ongoing_usage_balance_cents: i32, credits_ongoing_balance: String, credits_ongoing_usage_balance: String) -> WalletObject {
        WalletObject {
            lago_id,
            lago_customer_id,
            external_customer_id,
            status,
            currency,
            name: None,
            rate_amount,
            credits_balance,
            balance_cents,
            consumed_credits,
            created_at,
            expiration_at: None,
            last_balance_sync_at: None,
            last_consumed_credit_at: None,
            terminated_at: None,
            invoice_requires_successful_payment: None,
            recurring_transaction_rules: None,
            ongoing_balance_cents,
            ongoing_usage_balance_cents,
            credits_ongoing_balance,
            credits_ongoing_usage_balance,
        }
    }
}
/// The status of the wallet. Possible values are `active` or `terminated`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "terminated")]
    Terminated,
}

impl Default for Status {
    fn default() -> Status {
        Self::Active
    }
}

