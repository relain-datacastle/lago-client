/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.17.1
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubscriptionUpdateInputSubscription {
    /// The display name of the subscription on an invoice. This field allows for customization of the subscription's name for billing purposes, especially useful when a single customer has multiple subscriptions using the same plan.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The effective end date of the subscription. If this field is set to null, the subscription will automatically renew. This date should be provided in ISO 8601 datetime format, and use Coordinated Universal Time (UTC).
    #[serde(rename = "ending_at")]
    pub ending_at: String,
    /// The start date and time of the subscription. This field can only be modified for pending subscriptions that have not yet started. This date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
    #[serde(rename = "subscription_at", skip_serializing_if = "Option::is_none")]
    pub subscription_at: Option<String>,
    #[serde(rename = "plan_overrides", skip_serializing_if = "Option::is_none")]
    pub plan_overrides: Option<Box<models::PlanOverridesObject>>,
}

impl SubscriptionUpdateInputSubscription {
    pub fn new(ending_at: String) -> SubscriptionUpdateInputSubscription {
        SubscriptionUpdateInputSubscription {
            name: None,
            ending_at,
            subscription_at: None,
            plan_overrides: None,
        }
    }
}

